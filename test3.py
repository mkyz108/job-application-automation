# Import required libraries
import os
import warnings
from crewai import Agent, Task, Crew
from utils import get_openai_api_key

# Warning control
warnings.filterwarnings('ignore')

# Set OpenAI API key
openai_api_key = get_openai_api_key()
os.environ["OPENAI_MODEL_NAME"] = 'gpt-3.5-turbo'

# Define Agents
scheduler = Agent(
    role="Scheduler",
    goal="Create a prioritized daily schedule based on tasks provided by the user.",
    backstory="You are responsible for organizing the user's day. You ensure tasks are scheduled logically, accounting for deadlines and importance.",
    allow_delegation=False,
    verbose=True
)

reminder = Agent(
    role="Reminder",
    goal="Track tasks and deadlines, and send reminders to ensure timely completion.",
    backstory="You track deadlines and send reminders based on the user's schedule. Ensure no task is missed.",
    allow_delegation=False,
    verbose=True
)

summarizer = Agent(
    role="Summarizer",
    goal="Summarize emails, tasks, or notes into concise, actionable points.",
    backstory="You process long pieces of information and distill them into key points to save the user time.",
    allow_delegation=False,
    verbose=True
)

# Define Tasks
plan_day = Task(
    description=(
        "1. Organize the user's tasks into a prioritized daily schedule.\n"
        "2. Account for deadlines, task importance, and estimated time needed.\n"
        "3. Output a detailed schedule in hourly blocks."
    ),
    expected_output="A well-structured daily schedule in markdown format.",
    agent=scheduler
)

send_reminders = Task(
    description=(
        "1. Create a list of reminders for tasks based on the provided schedule.\n"
        "2. Specify the time and content of each reminder.\n"
    ),
    expected_output="A list of reminders with times and corresponding tasks.",
    agent=reminder
)

summarize_info = Task(
    description=(
        "1. Summarize the provided emails or notes into actionable points.\n"
        "2. Highlight deadlines, key information, and next steps."
    ),
    expected_output="A concise summary of the input information.",
    agent=summarizer
)

# Define the Crew
crew = Crew(
    agents=[scheduler, reminder, summarizer],
    tasks=[plan_day, send_reminders, summarize_info],
    verbose=2
)

# Main function to execute the script
if __name__ == "__main__":
    # Prompt user for input
    print("Welcome to the Personal Productivity Assistant!")
    print("Please enter your tasks for the day (comma-separated):")
    tasks = input("> ")

    print("\nPlease enter emails or notes you would like summarized:")
    emails = input("> ")

    # Execute the crew
    result = crew.kickoff(inputs={
        "tasks": tasks,
        "emails": emails
    })

    # Display the result
    print("\nHere is the output generated by the agents:")
    print(result)
